/*-------------------------------------------------------------------------*\
**  ScalaCheck                                                             **
**  Copyright (c) 2007-2008 Rickard Nilsson. All rights reserved.          **
**  http://code.google.com/p/scalacheck/                                   **
**                                                                         **
**  This software is released under the terms of the Revised BSD License.  **
**  There is NO WARRANTY. See the file LICENSE for the full text.          **
\*-------------------------------------------------------------------------*/

package org.scalatest

trait PropSuite extends Suite {

  import scala.collection._

  /** Adds a property to this property collection */
  def check(propName: String, prop: => Prop) =
    addProp(propName, Prop.property(prop))

  /** Adds a property to this property collection */
  def check[A1,P] (
    propName: String, f: A1 => P)(implicit
    p: P => Prop,
    a1: Arb[A1] => Arbitrary[A1]
  ): Unit = addProp(propName,Prop.property(f))

  /** Adds a property to this property collection */
  def check[A1,A2,P] (
    propName: String, f: (A1,A2) => P)(implicit
    p: P => Prop,
    a1: Arb[A1] => Arbitrary[A1],
    a2: Arb[A2] => Arbitrary[A2]
  ): Unit = addProp(propName,Prop.property(f))

  /** Adds a property to this property collection */
  def check[A1,A2,A3,P] (
    propName: String, f: (A1,A2,A3) => P)(implicit
    p: P => Prop,
    a1: Arb[A1] => Arbitrary[A1],
    a2: Arb[A2] => Arbitrary[A2],
    a3: Arb[A3] => Arbitrary[A3]
  ): Unit = addProp(propName,Prop.property(f))

  /** Adds a property to this property collection */
  def check[A1,A2,A3,A4,P] (
    propName: String, f: (A1,A2,A3,A4) => P)(implicit
    p: P => Prop,
    a1: Arb[A1] => Arbitrary[A1],
    a2: Arb[A2] => Arbitrary[A2],
    a3: Arb[A3] => Arbitrary[A3],
    a4: Arb[A4] => Arbitrary[A4]
  ): Unit = addProp(propName,Prop.property(f))

  /** Adds a property to this property collection */
  def check[A1,A2,A3,A4,A5,P] (
    propName: String, f: (A1,A2,A3,A4,A5) => P)(implicit
    p: P => Prop,
    a1: Arb[A1] => Arbitrary[A1],
    a2: Arb[A2] => Arbitrary[A2],
    a3: Arb[A3] => Arbitrary[A3],
    a4: Arb[A5] => Arbitrary[A5],
    a5: Arb[A4] => Arbitrary[A4]
  ): Unit = addProp(propName,Prop.property(f))

  /** Adds a property to this property collection */
  def check[A1,A2,A3,A4,A5,A6,P] (
    propName: String, f: (A1,A2,A3,A4,A5,A6) => P)(implicit
    p: P => Prop,
    a1: Arb[A1] => Arbitrary[A1],
    a2: Arb[A2] => Arbitrary[A2],
    a3: Arb[A3] => Arbitrary[A3],
    a4: Arb[A4] => Arbitrary[A4],
    a5: Arb[A5] => Arbitrary[A5],
    a6: Arb[A6] => Arbitrary[A6]
  ): Unit = addProp(propName,Prop.property(f))

  type NamedPropEvalCallback = (String,Int,Int) => Unit
  type TestStatsCallback = (String,Test.Stats) => Unit

  /** Tests all properties with the given testing parameters, and returns
   *  the test results.
   */
  def checkProperties(prms: Test.Params): immutable.Map[String,Test.Stats] =
    checkProperties(prms, (n,s,d) => (), (n,s) => ())

  /** Tests all properties with the given testing parameters, and returns
   *  the test results. <code>f</code> is a function which is called each
   *  time a property is evaluted. <code>g</code> is a function called each
   *  time a property has been fully tested.
   */
  def checkProperties(prms: Test.Params, propCallback: NamedPropEvalCallback,
    testCallback: TestStatsCallback): immutable.Map[String,Test.Stats] = 
    immutable.Map(properties.toStream: _*).transform { 
      case (pName,p) =>
       val stats = Test.check(prms,p,propCallback(pName,_,_))
       testCallback(pName,stats)
       stats
    }

  /** Tests all properties with the given testing parameters, and returns
   *  the test results. <code>f</code> is a function which is called each
   *  time a property is evaluted. <code>g</code> is a function called each
   *  time a property has been fully testedi. Uses actors for execution.
   */
  def checkProperties(prms: Test.Params, propCallback: NamedPropEvalCallback,
    testCallback: TestStatsCallback, workers: Int, wrkSize: Int): immutable.Map[String,Test.Stats] = 
    immutable.Map(properties.toStream: _*).transform { 
      case (pName,p) =>
       val stats = Test.check(prms,p,propCallback(pName,_,_),workers,wrkSize)
       testCallback(pName,stats)
       stats
    }
}
