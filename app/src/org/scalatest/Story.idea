import org.scalatest._
/*
  private val complainReporter =
    new Reporter {
      private val complaint = "You can only use reporter during the execution of a FunSuite."
      override def runStarting(testCount: Int) {
        throw new IllegalStateException(complaint)
      }
      override def testStarting(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def testSucceeded(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def testFailed(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def testIgnored(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def suiteStarting(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def infoProvided(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def suiteCompleted(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def suiteAborted(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def runStopped() {
        throw new IllegalStateException(complaint)
      }
      override def runAborted(report: Report) {
        throw new IllegalStateException(complaint)
      }
      override def runCompleted() {
        throw new IllegalStateException(complaint)
      }
      override def dispose() {
        throw new IllegalStateException(complaint)
      }
    }
  
  private val atomicReporter = new AtomicReference[Reporter](complainReporter)
*/
  /*
   * I'm going to continue with the testWithReporter approach for a while. Otherwise it
   * gets even harder to say the Fun in FunSuite stands for functional. It's quite rare I
   * expect that people doing this style of testing will want to write to the reporter.
   * Get the reporter passed to execute. This method can only be used during the execution
   * of a <code>FunSuite</code>.
  protected def reporter: Reporter = artimaReporter.get
   */

class Story extends Suite {
  private var theScenario: () => Unit = _
  // This could be thread local just in case
  private var currentReporter: Reporter = new Reporter {}
  protected def given(s: String) = {
    val report = new Report("given", s)
    currentReporter.infoProvided(report)
  }
  protected def when(s: String) = {
    val report = new Report("when", s)
    currentReporter.infoProvided(report)
  }
  protected def then(s: String) = {
    val report = new Report("then", s)
    currentReporter.infoProvided(report)
  }
  protected def and(s: String) = {
    val report = new Report("and", s)
    currentReporter.infoProvided(report)
  }
  protected def scenario(s: String)(f: => Unit) {
    println("Executing scenario: " + s)
    theScenario = f _
  }
  def runScenario() = {
    currentReporter = new Reporter {
      override def infoProvided(report: Report) {
        println(report.name + ": " + report.message)
      }
    }
    theScenario()
  }
}

class MyStory extends Story {

  scenario("The first scenario") {
    given("something that's given")
    // do some code
    when("something else happens")
    // some more code
    and("something still more happens")
    // more code
    then("something must be true")
    // the actual assertion
  }
}

class TransferStory extends Story("transfer from savings to checking account") {

  info("As a savings account holder")
  info("I want to transfer money from my savings account to my checking account")
  info("So that I can get cash easily from an ATM")

  pendingScenario("savings account has sufficient funds") {
    given("my savings account balance is $100")
    and("my checking account balance is $10")
    when("I transfer $20 from savings to checking")
    then("my savings account balance should be $80")
    and("my checking account balance should be $30")
  }

  pendingScenario("savings account has insufficient funds") {
    given("my savings account balance is $50")
    and("my checking account balance is $10")
    when("I transfer $60 from savings to checking")
    then("my savings account balance should be $50")
    and("my checking account balance should be $10")
  }
}

// What I could do is have a tool in org.scalatest.tools that
// translates a bare text story, like they have on the rSpec site
// into a class that has pendingScenarios. Then all that's needed
// is for someone to fill in the missing code and change
// "pendingScenario" to "scenario".
// The other thing we can show is that properties may make for a nice
// way to write these scenarios and execute them

Story: transfer from savings to checking account
  As a savings account holder
  I want to transfer money from my savings account to my checking account
  So that I can get cash easily from an ATM

  Scenario: savings account has sufficient funds
    Given my savings account balance is s, where s >= 0
    And my checking account balance is c, where c >= 0
    When I transfer t, where t >= 0 and t <= s, from savings to checking
    Then my savings account balance should be s - t
    And my checking account balance should be c + t

  Scenario: savings account has insufficient funds
    Given my savings account balance is s, where s >= 0
    And my checking account balance is c, where c >= 0
    When I transfer t, where t >= 0 and t > s, from savings to checking
    Then my savings account balance should be s
    And my checking account balance should be c

Then from that we can write properties

So a Story and a PropStory.

Could just require people to do with methods or create methods.

  scenario("savings account has insufficient funds") {
    withSavingsAndChecking {
      (savings, checking) => {
        given("my savings account balance is $50")
        and("my checking account balance is $10")
        when("I transfer $60 from savings to checking")
        then("my savings account balance should be $50")
        and("my checking account balance should be $10")
      }
    }
  }

or

  scenario("savings account has insufficient funds") {
    val (savings, checking) = createSavingsAndChecking
    given("my savings account balance is $50")
    and("my checking account balance is $10")
    when("I transfer $60 from savings to checking")
    then("my savings account balance should be $50")
    and("my checking account balance should be $10")
  }

Then not give them an ImpStory and ImpSpec unless they scream.
